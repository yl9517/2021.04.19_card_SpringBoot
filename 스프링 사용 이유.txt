Spring은 개발 프레임워크이다.

Spring 사용 이유
흔히 쉽게 말해서 spring을 쓰는 가장 큰 이유는
재사용성, 수정에 대한 변경포인트 , 협업 , 유지보수 등이 용이한 장점이 있기 때문이다.

그렇다면 어떻게 이러한 장점들이 있을까?


Spring 이전에는 jsp , servlet , php등이 많이 사용되었다.

그러나 이들은 개발이 진행됨에 따라 로직이 점점 복잡해지고지속적인 잦은 변경이 요구되었으며,
타 시스템들과의 연계도 부족했다.

반면에 스프링은 이러한 복잡함으로 부터 비교적 자유로운데,
이는 spring의 여러 특별한 장점들이 있기 때문이다.



 Spring은 Spring Triangle이라고 부르는 세 가지 개념을 제공한다.  각각 IoC / AOP / PSA

: 환경의 변화와 관계없이 일관된 방식의 기술로의 접근 환경을 제공하려는 추상화 구조

: 교체가 용이한 서비스 추상화(잘 만든 인터페이스)


====================

의존성과 DI : 
프로그래밍에는 의존성이라는 단어가 있다.
이는 객체와 객체간의 의존을 의미한다.

A라는 클래스가 B 클래스의 메소드를 불러와 실행하는 경우에 A는 B에 의존한다고 말한다.
기존 프로그램들같은 경우에,
B 클래스의 이름을 바꾸게 된다면 A클래스에서는 B클래스를 찾을수 없기에 같이 변경해줘야 한다.


하지만 Spring에서는 제3자가 중개인역할을 해주어서, 따로 변경을 하지 않아도 된다.

즉, A , B 클래스 사이에 C라는 제 3자가 중개를 해주는 것이다.
따라서 DI의 역할은 기본 방식의 의존성을 제거하고, 
별도로 3자(위의 C) 가 만들어주는 의존객체를 각 클래스에 뿌려주는 기능을 하므로써
변경의 유연성을 제공한다.

IoC: 의존성 역전

의존성 역전은 스프링 프레임워크에서 지원하는 중요한 개발 컨셉인 의존성 주입(DI)를
이해하기 위해 중요한 개념이다.

가령 E라는 클래스에서 특정 메소드를 행하려면
 먼저 E를 만들어야하며, A,B,C,D부터 순서대로
A->B->C->D->E 로 만들어야한다.

B를만드려면 A가있어야하고, C를만들려면 B가 있어야하므로 하나씩 차근차근 만들어나가는 것이다.
이러한 방식이 기존 개발 방식이고,

스프링에서는 이러한 것들을 대부분 미리 지원해주어서 개발자가 E로 무엇을 하고싶다면
 A<-B<-C<-D<-E 

이런식으로 ABCD 중 아무거나 쓸수 있게 해주는 것이다.

이런식으로 이용이 가능하므로 의존성 '역전'이라고 한다.

의존성 역전은 객체 간의 결합도를 줄이고 유연한 코드를 작성하게 하여 
가독성 및 코드의 중복, 유지보수를 편하게 할 수 있게 한다.



AOP :  관점 지향 프로그래밍

AOP란 한 어플리케이션 내의 다양한 모듈에서 공통적으로 이용되는 기능을 분리시켜서 사용하는것이다.
모듈의 핵심기능 외의기능을 해당모델에 종속시키지 않기 위한것이다.

이렇게 말하니 별거 아닌것 처럼 보이지만 사실상 AOP란 장점이 Spring을 쓰는 가장 큰 이유라고 봐도 과언이 아니다.

왜냐? ==> java는 하나의 클래스에대한 수직적인 흐름만을 제어할 수 있지만 Spring을 쓰면
 AOP의 장점이 있으므로 수평적인 제어를 해줄 수 있기 때문이다.


PSA: 잘 만든 인터페이스

스프링에서 제공해주는 대부분의 API이다.

@Controller, @GetMapping
등의 어노테이션이있다.

구현체를 바꾸게 되더라도 우리의 코드를 변경할 필요가 없기에 매우 유용한 기능이다.

이렇듯 Spring을 사용하면 훨씬 간편하기에 Spring을 사용한다.

